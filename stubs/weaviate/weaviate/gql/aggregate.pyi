from .filter import Filter as Filter, GraphQL as GraphQL, NearObject as NearObject, NearText as NearText, NearVector as NearVector, Where as Where
from typing import List
from weaviate.connect import Connection as Connection

class AggregateBuilder(GraphQL):
    def __init__(self, class_name: str, connection: Connection) -> None: ...
    def with_meta_count(self) -> AggregateBuilder: ...
    def with_object_limit(self, limit: int) -> AggregateBuilder: ...
    def with_fields(self, field: str) -> AggregateBuilder: ...
    def with_where(self, content: dict) -> AggregateBuilder: ...
    def with_group_by_filter(self, properties: List[str]) -> AggregateBuilder: ...
    def with_near_text(self, content: dict) -> AggregateBuilder: ...
    def with_near_vector(self, content: dict) -> AggregateBuilder: ...
    def with_near_object(self, content: dict) -> AggregateBuilder: ...
    def build(self) -> str: ...
