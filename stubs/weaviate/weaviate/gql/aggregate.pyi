from .filter import Filter as Filter, GraphQL as GraphQL, MediaType as MediaType, NearAudio as NearAudio, NearDepth as NearDepth, NearIMU as NearIMU, NearImage as NearImage, NearObject as NearObject, NearText as NearText, NearThermal as NearThermal, NearVector as NearVector, NearVideo as NearVideo, Where as Where
from typing import List
from weaviate.connect import Connection as Connection
from weaviate.util import file_encoder_b64 as file_encoder_b64

class AggregateBuilder(GraphQL):
    def __init__(self, class_name: str, connection: Connection) -> None: ...
    def with_tenant(self, tenant: str) -> AggregateBuilder: ...
    def with_meta_count(self) -> AggregateBuilder: ...
    def with_object_limit(self, limit: int) -> AggregateBuilder: ...
    def with_limit(self, limit: int) -> AggregateBuilder: ...
    def with_fields(self, field: str) -> AggregateBuilder: ...
    def with_where(self, content: dict) -> AggregateBuilder: ...
    def with_group_by_filter(self, properties: List[str]) -> AggregateBuilder: ...
    def with_near_text(self, content: dict) -> AggregateBuilder: ...
    def with_near_vector(self, content: dict) -> AggregateBuilder: ...
    def with_near_object(self, content: dict) -> AggregateBuilder: ...
    def with_near_image(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def with_near_audio(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def with_near_video(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def with_near_depth(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def with_near_thermal(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def with_near_imu(self, content: dict, encode: bool = ...) -> AggregateBuilder: ...
    def build(self) -> str: ...
