import abc
from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional, Sequence, Union
from weaviate.util import get_valid_uuid as get_valid_uuid, get_vector as get_vector

BatchResponse = List[Dict[str, Any]]

class BatchRequest(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    def __len__(self) -> int: ...
    def is_empty(self) -> bool: ...
    def empty(self) -> None: ...
    def pop(self, index: int = ...) -> dict: ...
    @abstractmethod
    def add(self, *args, **kwargs): ...
    @abstractmethod
    def get_request_body(self) -> Union[List[Dict[str, Any]], Dict[str, Any]]: ...
    @abstractmethod
    def add_failed_objects_from_response(self, response_item: BatchResponse, errors_to_exclude: Optional[List[str]], errors_to_include: Optional[List[str]]) -> BatchResponse: ...

class ReferenceBatchRequest(BatchRequest):
    def add(self, from_object_class_name: str, from_object_uuid: str, from_property_name: str, to_object_uuid: str, to_object_class_name: Optional[str] = ...) -> None: ...
    def get_request_body(self) -> List[Dict[str, Any]]: ...
    def add_failed_objects_from_response(self, response: BatchResponse, errors_to_exclude: Optional[List[str]], errors_to_include: Optional[List[str]]) -> BatchResponse: ...

class ObjectsBatchRequest(BatchRequest):
    def add(self, data_object: dict, class_name: str, uuid: Optional[str] = ..., vector: Optional[Sequence] = ...) -> str: ...
    def get_request_body(self) -> Dict[str, Any]: ...
    def add_failed_objects_from_response(self, response: BatchResponse, errors_to_exclude: Optional[List[str]], errors_to_include: Optional[List[str]]) -> BatchResponse: ...
