import requests
from typing import Any, Dict, Optional, Tuple, Union
from weaviate.auth import AuthApiKey as AuthApiKey, AuthClientCredentials as AuthClientCredentials, AuthCredentials as AuthCredentials
from weaviate.config import ConnectionConfig as ConnectionConfig
from weaviate.embedded import EmbeddedDB as EmbeddedDB
from weaviate.exceptions import AuthenticationFailedException as AuthenticationFailedException, WeaviateStartUpError as WeaviateStartUpError
from weaviate.types import NUMBERS as NUMBERS
from weaviate.util import PYPI_PACKAGE_URL as PYPI_PACKAGE_URL, is_weaviate_client_too_old as is_weaviate_client_too_old, is_weaviate_domain as is_weaviate_domain, is_weaviate_too_old as is_weaviate_too_old
from weaviate_grpc import weaviate_pb2_grpc

has_grpc: bool
JSONPayload = Union[dict, list]
Session: Union[requests.sessions.Session, OAuth2Session]
TIMEOUT_TYPE_RETURN = Tuple[NUMBERS, NUMBERS]
PYPI_TIMEOUT: int

class Connection:
    url: str
    embedded_db: Optional[EmbeddedDB]
    def __init__(self, url: str, auth_client_secret: Optional[AuthCredentials], timeout_config: TIMEOUT_TYPE_RETURN, proxies: Union[dict, str, None], trust_env: bool, additional_headers: Optional[Dict[str, Any]], startup_period: Optional[int], connection_config: ConnectionConfig, embedded_db: Optional[EmbeddedDB] = ..., grcp_port: Optional[int] = ...) -> None: ...
    def get_current_bearer_token(self) -> str: ...
    def close(self) -> None: ...
    def delete(self, path: str, weaviate_object: Optional[JSONPayload] = ..., params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def patch(self, path: str, weaviate_object: JSONPayload, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def post(self, path: str, weaviate_object: JSONPayload, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def put(self, path: str, weaviate_object: JSONPayload, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def get(self, path: str, params: Optional[Dict[str, Any]] = ..., external_url: bool = ...) -> requests.Response: ...
    def head(self, path: str, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    @property
    def timeout_config(self) -> TIMEOUT_TYPE_RETURN: ...
    @property
    def proxies(self) -> dict: ...
    def wait_for_weaviate(self, startup_period: int) -> None: ...
    @property
    def grpc_stub(self) -> Optional[weaviate_pb2_grpc.WeaviateStub]: ...
    @property
    def server_version(self) -> str: ...
    def get_meta(self) -> Dict[str, str]: ...
