import requests
from typing import Any, Dict, Optional, Tuple, Union
from authlib.integrations.requests_client import OAuth2Session
from weaviate.auth import AuthApiKey as AuthApiKey, AuthClientCredentials as AuthClientCredentials, AuthCredentials as AuthCredentials
from weaviate.config import ConnectionConfig as ConnectionConfig
from weaviate.embedded import EmbeddedDB as EmbeddedDB
from weaviate.exceptions import AuthenticationFailedException as AuthenticationFailedException, UnexpectedStatusCodeException as UnexpectedStatusCodeException, WeaviateStartUpError as WeaviateStartUpError
from weaviate.types import NUMBERS as NUMBERS
from weaviate.util import is_weaviate_domain as is_weaviate_domain, is_weaviate_too_old as is_weaviate_too_old
from weaviate_grpc import weaviate_pb2_grpc

has_grpc: bool
Session: Union[requests.sessions.Session, OAuth2Session]
TIMEOUT_TYPE_RETURN = Tuple[NUMBERS, NUMBERS]

class BaseConnection:
    url: str
    embedded_db: Optional[EmbeddedDB] = None
    def __init__(self, url: str, auth_client_secret: Optional[AuthCredentials], timeout_config: TIMEOUT_TYPE_RETURN, proxies: Union[dict, str, None], trust_env: bool, additional_headers: Optional[Dict[str, Any]], startup_period: Optional[int], connection_config: ConnectionConfig, embedded_db: Optional[EmbeddedDB] = ..., grcp_port: Optional[int] = ...) -> None: ...
    def get_current_bearer_token(self) -> str: ...
    def close(self) -> None: ...
    def delete(self, path: str, weaviate_object: dict = ..., params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def patch(self, path: str, weaviate_object: dict, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def post(self, path: str, weaviate_object: dict, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def put(self, path: str, weaviate_object: dict, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    def get(self, path: str, params: Optional[Dict[str, Any]] = ..., external_url: bool = ...) -> requests.Response: ...
    def head(self, path: str, params: Optional[Dict[str, Any]] = ...) -> requests.Response: ...
    @property
    def timeout_config(self) -> TIMEOUT_TYPE_RETURN: ...
    @property
    def proxies(self) -> dict: ...
    def wait_for_weaviate(self, startup_period: Optional[int]): ...

class Connection(BaseConnection):
    def __init__(self, url: str, auth_client_secret: Optional[AuthCredentials], timeout_config: TIMEOUT_TYPE_RETURN, proxies: Union[dict, str, None], trust_env: bool, additional_headers: Optional[Dict[str, Any]], startup_period: Optional[int], connection_config: ConnectionConfig, embedded_db: Optional[EmbeddedDB] = ..., grcp_port: Optional[int] = ...) -> None: ...
    @property
    def grpc_stub(self) -> Optional[weaviate_pb2_grpc.WeaviateStub]: ...
    @property
    def server_version(self) -> str: ...
    def get_meta(self) -> Dict[str, str]: ...
