import uuid as uuid_lib
from enum import Enum, EnumMeta
from io import BufferedReader
from typing import Any, Dict, List, Optional, Sequence, Union
from weaviate.exceptions import ResponseCannotBeDecodedException as ResponseCannotBeDecodedException, SchemaValidationException as SchemaValidationException, UnexpectedStatusCodeException as UnexpectedStatusCodeException
from weaviate.types import NUMBERS as NUMBERS

PYPI_PACKAGE_URL: str
MAXIMUM_MINOR_VERSION_DELTA: int
MINIMUM_NO_WARNING_VERSION: str

class MetaEnum(EnumMeta):
    def __contains__(cls, item: Any) -> bool: ...

class BaseEnum(Enum, metaclass=MetaEnum): ...

def image_encoder_b64(image_or_image_path: Union[str, BufferedReader]) -> str: ...
def file_encoder_b64(file_or_file_path: Union[str, BufferedReader]) -> str: ...
def image_decoder_b64(encoded_image: str) -> bytes: ...
def file_decoder_b64(encoded_file: str) -> bytes: ...
def generate_local_beacon(to_uuid: Union[str, uuid_lib.UUID], class_name: Optional[str] = ...) -> dict: ...
def is_weaviate_object_url(url: str) -> bool: ...
def is_object_url(url: str) -> bool: ...
def get_valid_uuid(uuid: Union[str, uuid_lib.UUID]) -> str: ...
def get_vector(vector: Sequence) -> list: ...
def get_domain_from_weaviate_url(url: str) -> str: ...
def generate_uuid5(identifier: Any, namespace: Any = ...) -> str: ...
def check_batch_result(results: Optional[List[Dict[str, Any]]]) -> None: ...
def is_weaviate_domain(url: str) -> bool: ...
def strip_newlines(s: str) -> str: ...
def parse_version_string(ver_str: str) -> tuple: ...
def is_weaviate_too_old(current_version_str: str) -> bool: ...
def is_weaviate_client_too_old(current_version_str: str, latest_version_str: str) -> bool: ...
