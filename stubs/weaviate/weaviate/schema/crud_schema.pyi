from enum import Enum
from typing import List, Set, Optional, Union
from weaviate.connect import Connection as Connection
from weaviate.exceptions import UnexpectedStatusCodeException as UnexpectedStatusCodeException
from weaviate.schema.properties import Property as Property

CLASS_KEYS: Set[str]
PROPERTY_KEYS: Set[str]

class TenantActivityStatus(str, Enum):
    HOT: str
    COLD: str

class Tenant:
    name: str
    activity_status: TenantActivityStatus
    def __init__(self, name, activity_status) -> None: ...

class Schema:
    property: Property
    def __init__(self, connection: Connection) -> None: ...
    def create(self, schema: Union[dict, str]) -> None: ...
    def create_class(self, schema_class: Union[dict, str]) -> None: ...
    def delete_class(self, class_name: str) -> None: ...
    def delete_all(self) -> None: ...
    def exists(self, class_name: str) -> bool: ...
    def contains(self, schema: Optional[Union[dict, str]] = ...) -> bool: ...
    def update_config(self, class_name: str, config: dict) -> None: ...
    def get(self, class_name: Optional[str] = ...) -> dict: ...
    def get_class_shards(self, class_name: str) -> list: ...
    def update_class_shard(self, class_name: str, status: str, shard_name: Optional[str] = ...) -> list: ...
    def add_class_tenants(self, class_name: str, tenants: List[Tenant]) -> None: ...
    def remove_class_tenants(self, class_name: str, tenants: List[str]) -> None: ...
    def get_class_tenants(self, class_name: str) -> List[Tenant]: ...
    def update_class_tenants(self, class_name: str, tenants: List[Tenant]) -> None: ...
