from typing import Optional, Union
from weaviate.connect import Connection as Connection
from weaviate.exceptions import UnexpectedStatusCodeException as UnexpectedStatusCodeException
from weaviate.schema.properties import Property as Property
from weaviate.schema.validate_schema import CLASS_KEYS as CLASS_KEYS, PROPERTY_KEYS as PROPERTY_KEYS, check_class as check_class, validate_schema as validate_schema

class Schema:
    property: Property
    def __init__(self, connection: Connection) -> None: ...
    def create(self, schema: Union[dict, str]) -> None: ...
    def create_class(self, schema_class: Union[dict, str]) -> None: ...
    def delete_class(self, class_name: str) -> None: ...
    def delete_all(self) -> None: ...
    def exists(self, class_name: str) -> bool: ...
    def contains(self, schema: Optional[Union[dict, str]] = ...) -> bool: ...
    def update_config(self, class_name: str, config: dict) -> None: ...
    def get(self, class_name: str = ...) -> dict: ...
    def get_class_shards(self, class_name: str) -> list: ...
    def update_class_shard(self, class_name: str, status: str, shard_name: Optional[str] = ...) -> list: ...
